/*!
* \file   TFEL/Material/FiniteStrainIsotropicLinearHardeningPlasticity2BehaviourData.hxx
* \brief  this file implements the FiniteStrainIsotropicLinearHardeningPlasticity2BehaviourData class.
*         File generated by tfel version 4.0.0-dev
* \author Thomas Helfer
* \date   09 / 03 / 2021
 */

#ifndef LIB_TFELMATERIAL_FINITESTRAINISOTROPICLINEARHARDENINGPLASTICITY2_BEHAVIOUR_DATA_HXX
#define LIB_TFELMATERIAL_FINITESTRAINISOTROPICLINEARHARDENINGPLASTICITY2_BEHAVIOUR_DATA_HXX

#include<limits>
#include<string>
#include<sstream>
#include<iostream>
#include<stdexcept>
#include<algorithm>

#include"TFEL/Raise.hxx"
#include"TFEL/PhysicalConstants.hxx"
#include"TFEL/Config/TFELConfig.hxx"
#include"TFEL/Config/TFELTypes.hxx"
#include"TFEL/TypeTraits/IsFundamentalNumericType.hxx"
#include"TFEL/TypeTraits/IsReal.hxx"
#include"TFEL/Math/General/IEEE754.hxx"
#include"TFEL/Math/stensor.hxx"
#include"TFEL/Math/Stensor/StensorConceptIO.hxx"
#include"TFEL/Math/tmatrix.hxx"
#include"TFEL/Math/Matrix/tmatrixIO.hxx"
#include"TFEL/Math/st2tost2.hxx"
#include"TFEL/Math/ST2toST2/ST2toST2ConceptIO.hxx"
#include"TFEL/Material/ModellingHypothesis.hxx"

#include "TFEL/Math/RootFinding/BissectionAlgorithmBase.hxx"
#include "TFEL/Math/AccelerationAlgorithms/AitkenAccelerationAlgorithm.hxx"

#include "MFront/GenericBehaviour/State.hxx"
#include "MFront/GenericBehaviour/BehaviourData.hxx"
namespace tfel{

namespace material{

//! \brief forward declaration
template<ModellingHypothesis::Hypothesis hypothesis,typename,bool>
class FiniteStrainIsotropicLinearHardeningPlasticity2BehaviourData;

//! \brief forward declaration
template<ModellingHypothesis::Hypothesis hypothesis,typename Type,bool use_qt>
class FiniteStrainIsotropicLinearHardeningPlasticity2IntegrationData;

//! \brief forward declaration
template<ModellingHypothesis::Hypothesis hypothesis,typename Type>
std::ostream&
 operator <<(std::ostream&,const FiniteStrainIsotropicLinearHardeningPlasticity2BehaviourData<hypothesis,Type,false>&);

//! \brief forward declaration
template<typename Type>
std::ostream&
 operator <<(std::ostream&,const FiniteStrainIsotropicLinearHardeningPlasticity2BehaviourData<ModellingHypothesis::AXISYMMETRICALGENERALISEDPLANESTRESS,Type,false>&);

//! \brief forward declaration
template<typename Type>
std::ostream&
 operator <<(std::ostream&,const FiniteStrainIsotropicLinearHardeningPlasticity2BehaviourData<ModellingHypothesis::PLANESTRESS,Type,false>&);

template<ModellingHypothesis::Hypothesis hypothesis,typename Type>
class FiniteStrainIsotropicLinearHardeningPlasticity2BehaviourData<hypothesis,Type,false>
{

static constexpr unsigned short N = ModellingHypothesisToSpaceDimension<hypothesis>::value;
static_assert(N==1||N==2||N==3);
static_assert(tfel::typetraits::IsFundamentalNumericType<Type>::cond);
static_assert(tfel::typetraits::IsReal<Type>::cond);

friend std::ostream& operator<< <>(std::ostream&,const FiniteStrainIsotropicLinearHardeningPlasticity2BehaviourData&);

/* integration data is declared friend to access   driving variables at the beginning of the time step */
friend class FiniteStrainIsotropicLinearHardeningPlasticity2IntegrationData<hypothesis,Type,false>;

static constexpr unsigned short TVectorSize = N;
typedef tfel::math::StensorDimeToSize<N> StensorDimeToSize;
static constexpr unsigned short StensorSize = StensorDimeToSize::value;
typedef tfel::math::TensorDimeToSize<N> TensorDimeToSize;
static constexpr unsigned short TensorSize = TensorDimeToSize::value;

using ushort =  unsigned short;
using Types = tfel::config::Types<N,Type,false>;
using real                = typename Types::real;
using time                = typename Types::time;
using length              = typename Types::length;
using frequency           = typename Types::frequency;
using stress              = typename Types::stress;
using strain              = typename Types::strain;
using strainrate          = typename Types::strainrate;
using stressrate          = typename Types::stressrate;
using temperature         = typename Types::temperature;
using thermalexpansion    = typename Types::thermalexpansion;
using thermalconductivity = typename Types::thermalconductivity;
using massdensity         = typename Types::massdensity;
using energydensity         = typename Types::energydensity;
using TVector             = typename Types::TVector;
using Stensor             = typename Types::Stensor;
using Stensor4            = typename Types::Stensor4;
using FrequencyStensor    = typename Types::FrequencyStensor;
using ForceTVector        = typename Types::ForceTVector;
using StressStensor       = typename Types::StressStensor;
using StressRateStensor   = typename Types::StressRateStensor;
using DisplacementTVector = typename Types::DisplacementTVector;
using StrainStensor       = typename Types::StrainStensor;
using StrainRateStensor   = typename Types::StrainRateStensor;
using StiffnessTensor     = typename Types::StiffnessTensor;
using Tensor              = typename Types::Tensor;
using FrequencyTensor     = typename Types::FrequencyTensor;
using StressTensor        = typename Types::StressTensor;
using ThermalExpansionCoefficientTensor = typename Types::ThermalExpansionCoefficientTensor;
using DeformationGradientTensor         = typename Types::DeformationGradientTensor;
using DeformationGradientRateTensor     = typename Types::DeformationGradientRateTensor;
using TemperatureGradient = typename Types::TemperatureGradient;
using HeatFlux = typename Types::HeatFlux;
using TangentOperator   = StiffnessTensor;
using PhysicalConstants = tfel::PhysicalConstants<real>;

protected:

StrainStensor eto;

StressStensor sig;


StrainStensor eel;
strain p;
temperature T;

public:

/*!
* \brief Default constructor
*/
FiniteStrainIsotropicLinearHardeningPlasticity2BehaviourData()
{}

/*!
* \brief copy constructor
*/
FiniteStrainIsotropicLinearHardeningPlasticity2BehaviourData(const FiniteStrainIsotropicLinearHardeningPlasticity2BehaviourData& src)
: eto(src.eto),
sig(src.sig),
eel(src.eel),
p(src.p),
T(src.T)
{}

/*
 * \brief constructor for the Generic interface
 * \param[in] mgb_d: behaviour data
 */
FiniteStrainIsotropicLinearHardeningPlasticity2BehaviourData(const mfront::gb::BehaviourData& mgb_d)
: eel(&mgb_d.s0.internal_state_variables[0]),
p(mgb_d.s0.internal_state_variables[StensorSize]),
T(mgb_d.s0.external_state_variables[0])
{
}


/*
* \brief Assignement operator
*/
FiniteStrainIsotropicLinearHardeningPlasticity2BehaviourData&
operator=(const FiniteStrainIsotropicLinearHardeningPlasticity2BehaviourData& src){
this->eto = src.eto;
this->sig = src.sig;
this->eel = src.eel;
this->p = src.p;
this->T = src.T;
return *this;
}

void exportStateData(mfront::gb::State& mbg_s1) const
{
using namespace tfel::math;
tfel::fsalgo::copy<StensorSize>::exe(this->sig.begin(), mbg_s1.thermodynamic_forces);
tfel::fsalgo::copy<StensorSize>::exe(this->eel.begin(), mbg_s1.internal_state_variables);
mbg_s1.internal_state_variables[StensorSize] = this->p;
} // end of exportStateData

}; // end of FiniteStrainIsotropicLinearHardeningPlasticity2BehaviourDataclass

template<ModellingHypothesis::Hypothesis hypothesis,typename Type>
std::ostream&
operator <<(std::ostream& os,const FiniteStrainIsotropicLinearHardeningPlasticity2BehaviourData<hypothesis,Type,false>& b)
{
os << "εᵗᵒ : " << b.eto << '\n';
os << "σ : " << b.sig << '\n';
os << "εᵉˡ : " << b.eel << '\n';
os << "p : " << b.p << '\n';
os << "T : " << b.T << '\n';
return os;
}

template<typename Type>
class FiniteStrainIsotropicLinearHardeningPlasticity2BehaviourData<ModellingHypothesis::AXISYMMETRICALGENERALISEDPLANESTRESS,Type,false>
{

static constexpr ModellingHypothesis::Hypothesis hypothesis = ModellingHypothesis::AXISYMMETRICALGENERALISEDPLANESTRESS;
static constexpr unsigned short N = ModellingHypothesisToSpaceDimension<hypothesis>::value;
static_assert(N==1||N==2||N==3);
static_assert(tfel::typetraits::IsFundamentalNumericType<Type>::cond);
static_assert(tfel::typetraits::IsReal<Type>::cond);

friend std::ostream& operator<< <>(std::ostream&,const FiniteStrainIsotropicLinearHardeningPlasticity2BehaviourData&);

/* integration data is declared friend to access   driving variables at the beginning of the time step */
friend class FiniteStrainIsotropicLinearHardeningPlasticity2IntegrationData<hypothesis,Type,false>;

static constexpr unsigned short TVectorSize = N;
typedef tfel::math::StensorDimeToSize<N> StensorDimeToSize;
static constexpr unsigned short StensorSize = StensorDimeToSize::value;
typedef tfel::math::TensorDimeToSize<N> TensorDimeToSize;
static constexpr unsigned short TensorSize = TensorDimeToSize::value;

using ushort =  unsigned short;
using Types = tfel::config::Types<N,Type,false>;
using real                = typename Types::real;
using time                = typename Types::time;
using length              = typename Types::length;
using frequency           = typename Types::frequency;
using stress              = typename Types::stress;
using strain              = typename Types::strain;
using strainrate          = typename Types::strainrate;
using stressrate          = typename Types::stressrate;
using temperature         = typename Types::temperature;
using thermalexpansion    = typename Types::thermalexpansion;
using thermalconductivity = typename Types::thermalconductivity;
using massdensity         = typename Types::massdensity;
using energydensity         = typename Types::energydensity;
using TVector             = typename Types::TVector;
using Stensor             = typename Types::Stensor;
using Stensor4            = typename Types::Stensor4;
using FrequencyStensor    = typename Types::FrequencyStensor;
using ForceTVector        = typename Types::ForceTVector;
using StressStensor       = typename Types::StressStensor;
using StressRateStensor   = typename Types::StressRateStensor;
using DisplacementTVector = typename Types::DisplacementTVector;
using StrainStensor       = typename Types::StrainStensor;
using StrainRateStensor   = typename Types::StrainRateStensor;
using StiffnessTensor     = typename Types::StiffnessTensor;
using Tensor              = typename Types::Tensor;
using FrequencyTensor     = typename Types::FrequencyTensor;
using StressTensor        = typename Types::StressTensor;
using ThermalExpansionCoefficientTensor = typename Types::ThermalExpansionCoefficientTensor;
using DeformationGradientTensor         = typename Types::DeformationGradientTensor;
using DeformationGradientRateTensor     = typename Types::DeformationGradientRateTensor;
using TemperatureGradient = typename Types::TemperatureGradient;
using HeatFlux = typename Types::HeatFlux;
using TangentOperator   = StiffnessTensor;
using PhysicalConstants = tfel::PhysicalConstants<real>;

protected:

StrainStensor eto;

StressStensor sig;


StrainStensor eel;
strain p;
strain etozz;
temperature T;
strain sigzz;

public:

/*!
* \brief Default constructor
*/
FiniteStrainIsotropicLinearHardeningPlasticity2BehaviourData()
{}

/*!
* \brief copy constructor
*/
FiniteStrainIsotropicLinearHardeningPlasticity2BehaviourData(const FiniteStrainIsotropicLinearHardeningPlasticity2BehaviourData& src)
: eto(src.eto),
sig(src.sig),
eel(src.eel),
p(src.p),
etozz(src.etozz),
T(src.T),
sigzz(src.sigzz)
{}

/*
 * \brief constructor for the Generic interface
 * \param[in] mgb_d: behaviour data
 */
FiniteStrainIsotropicLinearHardeningPlasticity2BehaviourData(const mfront::gb::BehaviourData& mgb_d)
: eel(&mgb_d.s0.internal_state_variables[0]),
p(mgb_d.s0.internal_state_variables[StensorSize]),
etozz(mgb_d.s0.internal_state_variables[1+StensorSize]),
T(mgb_d.s0.external_state_variables[0]),
sigzz(mgb_d.s0.external_state_variables[1])
{
}


/*
* \brief Assignement operator
*/
FiniteStrainIsotropicLinearHardeningPlasticity2BehaviourData&
operator=(const FiniteStrainIsotropicLinearHardeningPlasticity2BehaviourData& src){
this->eto = src.eto;
this->sig = src.sig;
this->eel = src.eel;
this->p = src.p;
this->etozz = src.etozz;
this->T = src.T;
this->sigzz = src.sigzz;
return *this;
}

void exportStateData(mfront::gb::State& mbg_s1) const
{
using namespace tfel::math;
tfel::fsalgo::copy<StensorSize>::exe(this->sig.begin(), mbg_s1.thermodynamic_forces);
tfel::fsalgo::copy<StensorSize>::exe(this->eel.begin(), mbg_s1.internal_state_variables);
mbg_s1.internal_state_variables[StensorSize] = this->p;
mbg_s1.internal_state_variables[1+StensorSize] = this->etozz;
} // end of exportStateData

}; // end of FiniteStrainIsotropicLinearHardeningPlasticity2BehaviourDataclass

template<typename Type>
std::ostream&
operator <<(std::ostream& os,const FiniteStrainIsotropicLinearHardeningPlasticity2BehaviourData<ModellingHypothesis::AXISYMMETRICALGENERALISEDPLANESTRESS,Type,false>& b)
{
os << "εᵗᵒ : " << b.eto << '\n';
os << "σ : " << b.sig << '\n';
os << "εᵉˡ : " << b.eel << '\n';
os << "p : " << b.p << '\n';
os << "etozz : " << b.etozz << '\n';
os << "T : " << b.T << '\n';
os << "sigzz : " << b.sigzz << '\n';
return os;
}

template<typename Type>
class FiniteStrainIsotropicLinearHardeningPlasticity2BehaviourData<ModellingHypothesis::PLANESTRESS,Type,false>
{

static constexpr ModellingHypothesis::Hypothesis hypothesis = ModellingHypothesis::PLANESTRESS;
static constexpr unsigned short N = ModellingHypothesisToSpaceDimension<hypothesis>::value;
static_assert(N==1||N==2||N==3);
static_assert(tfel::typetraits::IsFundamentalNumericType<Type>::cond);
static_assert(tfel::typetraits::IsReal<Type>::cond);

friend std::ostream& operator<< <>(std::ostream&,const FiniteStrainIsotropicLinearHardeningPlasticity2BehaviourData&);

/* integration data is declared friend to access   driving variables at the beginning of the time step */
friend class FiniteStrainIsotropicLinearHardeningPlasticity2IntegrationData<hypothesis,Type,false>;

static constexpr unsigned short TVectorSize = N;
typedef tfel::math::StensorDimeToSize<N> StensorDimeToSize;
static constexpr unsigned short StensorSize = StensorDimeToSize::value;
typedef tfel::math::TensorDimeToSize<N> TensorDimeToSize;
static constexpr unsigned short TensorSize = TensorDimeToSize::value;

using ushort =  unsigned short;
using Types = tfel::config::Types<N,Type,false>;
using real                = typename Types::real;
using time                = typename Types::time;
using length              = typename Types::length;
using frequency           = typename Types::frequency;
using stress              = typename Types::stress;
using strain              = typename Types::strain;
using strainrate          = typename Types::strainrate;
using stressrate          = typename Types::stressrate;
using temperature         = typename Types::temperature;
using thermalexpansion    = typename Types::thermalexpansion;
using thermalconductivity = typename Types::thermalconductivity;
using massdensity         = typename Types::massdensity;
using energydensity         = typename Types::energydensity;
using TVector             = typename Types::TVector;
using Stensor             = typename Types::Stensor;
using Stensor4            = typename Types::Stensor4;
using FrequencyStensor    = typename Types::FrequencyStensor;
using ForceTVector        = typename Types::ForceTVector;
using StressStensor       = typename Types::StressStensor;
using StressRateStensor   = typename Types::StressRateStensor;
using DisplacementTVector = typename Types::DisplacementTVector;
using StrainStensor       = typename Types::StrainStensor;
using StrainRateStensor   = typename Types::StrainRateStensor;
using StiffnessTensor     = typename Types::StiffnessTensor;
using Tensor              = typename Types::Tensor;
using FrequencyTensor     = typename Types::FrequencyTensor;
using StressTensor        = typename Types::StressTensor;
using ThermalExpansionCoefficientTensor = typename Types::ThermalExpansionCoefficientTensor;
using DeformationGradientTensor         = typename Types::DeformationGradientTensor;
using DeformationGradientRateTensor     = typename Types::DeformationGradientRateTensor;
using TemperatureGradient = typename Types::TemperatureGradient;
using HeatFlux = typename Types::HeatFlux;
using TangentOperator   = StiffnessTensor;
using PhysicalConstants = tfel::PhysicalConstants<real>;

protected:

StrainStensor eto;

StressStensor sig;


StrainStensor eel;
strain p;
strain etozz;
temperature T;

public:

/*!
* \brief Default constructor
*/
FiniteStrainIsotropicLinearHardeningPlasticity2BehaviourData()
{}

/*!
* \brief copy constructor
*/
FiniteStrainIsotropicLinearHardeningPlasticity2BehaviourData(const FiniteStrainIsotropicLinearHardeningPlasticity2BehaviourData& src)
: eto(src.eto),
sig(src.sig),
eel(src.eel),
p(src.p),
etozz(src.etozz),
T(src.T)
{}

/*
 * \brief constructor for the Generic interface
 * \param[in] mgb_d: behaviour data
 */
FiniteStrainIsotropicLinearHardeningPlasticity2BehaviourData(const mfront::gb::BehaviourData& mgb_d)
: eel(&mgb_d.s0.internal_state_variables[0]),
p(mgb_d.s0.internal_state_variables[StensorSize]),
etozz(mgb_d.s0.internal_state_variables[1+StensorSize]),
T(mgb_d.s0.external_state_variables[0])
{
}


/*
* \brief Assignement operator
*/
FiniteStrainIsotropicLinearHardeningPlasticity2BehaviourData&
operator=(const FiniteStrainIsotropicLinearHardeningPlasticity2BehaviourData& src){
this->eto = src.eto;
this->sig = src.sig;
this->eel = src.eel;
this->p = src.p;
this->etozz = src.etozz;
this->T = src.T;
return *this;
}

void exportStateData(mfront::gb::State& mbg_s1) const
{
using namespace tfel::math;
tfel::fsalgo::copy<StensorSize>::exe(this->sig.begin(), mbg_s1.thermodynamic_forces);
tfel::fsalgo::copy<StensorSize>::exe(this->eel.begin(), mbg_s1.internal_state_variables);
mbg_s1.internal_state_variables[StensorSize] = this->p;
mbg_s1.internal_state_variables[1+StensorSize] = this->etozz;
} // end of exportStateData

}; // end of FiniteStrainIsotropicLinearHardeningPlasticity2BehaviourDataclass

template<typename Type>
std::ostream&
operator <<(std::ostream& os,const FiniteStrainIsotropicLinearHardeningPlasticity2BehaviourData<ModellingHypothesis::PLANESTRESS,Type,false>& b)
{
os << "εᵗᵒ : " << b.eto << '\n';
os << "σ : " << b.sig << '\n';
os << "εᵉˡ : " << b.eel << '\n';
os << "p : " << b.p << '\n';
os << "etozz : " << b.etozz << '\n';
os << "T : " << b.T << '\n';
return os;
}

} // end of namespace material

} // end of namespace tfel

#endif /* LIB_TFELMATERIAL_FINITESTRAINISOTROPICLINEARHARDENINGPLASTICITY2_BEHAVIOUR_DATA_HXX */
