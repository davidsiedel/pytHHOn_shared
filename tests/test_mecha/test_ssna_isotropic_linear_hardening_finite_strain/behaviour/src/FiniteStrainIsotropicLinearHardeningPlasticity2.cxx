/*!
* \file   FiniteStrainIsotropicLinearHardeningPlasticity2.cxx
* \brief  this file implements the FiniteStrainIsotropicLinearHardeningPlasticity2 Behaviour.
*         File generated by tfel version 4.0.0-dev
* \author Thomas Helfer
* \date   09 / 03 / 2021
 */

#include<string>
#include<cstring>
#include<sstream>
#include<fstream>
#include<stdexcept>

#include"TFEL/Raise.hxx"
#include"TFEL/Material/FiniteStrainIsotropicLinearHardeningPlasticity2BehaviourData.hxx"
#include"TFEL/Material/FiniteStrainIsotropicLinearHardeningPlasticity2IntegrationData.hxx"
#include"TFEL/Material/FiniteStrainIsotropicLinearHardeningPlasticity2.hxx"

namespace tfel{

namespace material{

FiniteStrainIsotropicLinearHardeningPlasticity2AxisymmetricalGeneralisedPlaneStressParametersInitializer&
FiniteStrainIsotropicLinearHardeningPlasticity2AxisymmetricalGeneralisedPlaneStressParametersInitializer::get()
{
static FiniteStrainIsotropicLinearHardeningPlasticity2AxisymmetricalGeneralisedPlaneStressParametersInitializer i;
return i;
}

FiniteStrainIsotropicLinearHardeningPlasticity2AxisymmetricalGeneralisedPlaneStressParametersInitializer::FiniteStrainIsotropicLinearHardeningPlasticity2AxisymmetricalGeneralisedPlaneStressParametersInitializer()
{
// Reading parameters from a file
FiniteStrainIsotropicLinearHardeningPlasticity2AxisymmetricalGeneralisedPlaneStressParametersInitializer::readParameters(*this,"FiniteStrainIsotropicLinearHardeningPlasticity2-parameters.txt");
FiniteStrainIsotropicLinearHardeningPlasticity2AxisymmetricalGeneralisedPlaneStressParametersInitializer::readParameters(*this,"FiniteStrainIsotropicLinearHardeningPlasticity2AxisymmetricalGeneralisedPlaneStress-parameters.txt");
}

void
FiniteStrainIsotropicLinearHardeningPlasticity2AxisymmetricalGeneralisedPlaneStressParametersInitializer::set(const char* const key,
const double v){
using namespace std;
if(::strcmp("epsilon",key)==0){
FiniteStrainIsotropicLinearHardeningPlasticity2ParametersInitializer::get().set("epsilon",v);
} else if(::strcmp("theta",key)==0){
FiniteStrainIsotropicLinearHardeningPlasticity2ParametersInitializer::get().set("theta",v);
} else if(::strcmp("YoungModulus",key)==0){
FiniteStrainIsotropicLinearHardeningPlasticity2ParametersInitializer::get().set("YoungModulus",v);
} else if(::strcmp("PoissonRatio",key)==0){
FiniteStrainIsotropicLinearHardeningPlasticity2ParametersInitializer::get().set("PoissonRatio",v);
} else if(::strcmp("RelativeValueForTheEquivalentStressLowerBoundDefinition",key)==0){
FiniteStrainIsotropicLinearHardeningPlasticity2ParametersInitializer::get().set("RelativeValueForTheEquivalentStressLowerBoundDefinition",v);
} else if(::strcmp("ihr_R0_",key)==0){
FiniteStrainIsotropicLinearHardeningPlasticity2ParametersInitializer::get().set("ihr_R0_",v);
} else if(::strcmp("ihr_H_",key)==0){
FiniteStrainIsotropicLinearHardeningPlasticity2ParametersInitializer::get().set("ihr_H_",v);
} else if(::strcmp("minimal_time_step_scaling_factor",key)==0){
FiniteStrainIsotropicLinearHardeningPlasticity2ParametersInitializer::get().set("minimal_time_step_scaling_factor",v);
} else if(::strcmp("maximal_time_step_scaling_factor",key)==0){
FiniteStrainIsotropicLinearHardeningPlasticity2ParametersInitializer::get().set("maximal_time_step_scaling_factor",v);
} else if(::strcmp("numerical_jacobian_epsilon",key)==0){
FiniteStrainIsotropicLinearHardeningPlasticity2ParametersInitializer::get().set("numerical_jacobian_epsilon",v);
} else {
tfel::raise("FiniteStrainIsotropicLinearHardeningPlasticity2AxisymmetricalGeneralisedPlaneStressParametersInitializer::set: "
" no parameter named '"+std::string(key)+"'");
}
}

void
FiniteStrainIsotropicLinearHardeningPlasticity2AxisymmetricalGeneralisedPlaneStressParametersInitializer::set(const char* const key,
const unsigned short v){
using namespace std;
if(::strcmp("iterMax",key)==0){
FiniteStrainIsotropicLinearHardeningPlasticity2ParametersInitializer::get().set("iterMax",v);
} else {
tfel::raise("FiniteStrainIsotropicLinearHardeningPlasticity2AxisymmetricalGeneralisedPlaneStressParametersInitializer::set: "
"no parameter named '"+std::string(key)+"'");
}
}

void
FiniteStrainIsotropicLinearHardeningPlasticity2AxisymmetricalGeneralisedPlaneStressParametersInitializer::readParameters(FiniteStrainIsotropicLinearHardeningPlasticity2AxisymmetricalGeneralisedPlaneStressParametersInitializer&,const char* const fn){
auto tokenize = [](const std::string& line){
std::istringstream tokenizer(line);
std::vector<std::string> tokens;
std::copy(std::istream_iterator<std::string>(tokenizer),
std::istream_iterator<std::string>(),
std::back_inserter(tokens));
return tokens;
};
std::ifstream f(fn);
if(!f){
return;
}
size_t ln = 1u;
while(!f.eof()){
auto line = std::string{};
std::getline(f,line);
auto tokens = tokenize(line);
auto throw_if = [ln,line,fn](const bool c,const std::string& m){
tfel::raise_if(c,"FiniteStrainIsotropicLinearHardeningPlasticity2AxisymmetricalGeneralisedPlaneStressParametersInitializer::readParameters: "
"error at line '"+std::to_string(ln)+"' "
"while reading parameter file '"+std::string(fn)+"'"
"("+m+")");
};
if(tokens.empty()){
continue;
}
if(tokens[0][0]=='#'){
continue;
}
throw_if(tokens.size()!=2u,"invalid number of tokens");
if("epsilon"==tokens[0]){
FiniteStrainIsotropicLinearHardeningPlasticity2ParametersInitializer::get().set("epsilon",
FiniteStrainIsotropicLinearHardeningPlasticity2ParametersInitializer::getDouble(tokens[0],tokens[1]));
} else if("theta"==tokens[0]){
FiniteStrainIsotropicLinearHardeningPlasticity2ParametersInitializer::get().set("theta",
FiniteStrainIsotropicLinearHardeningPlasticity2ParametersInitializer::getDouble(tokens[0],tokens[1]));
} else if("YoungModulus"==tokens[0]){
FiniteStrainIsotropicLinearHardeningPlasticity2ParametersInitializer::get().set("YoungModulus",
FiniteStrainIsotropicLinearHardeningPlasticity2ParametersInitializer::getDouble(tokens[0],tokens[1]));
} else if("PoissonRatio"==tokens[0]){
FiniteStrainIsotropicLinearHardeningPlasticity2ParametersInitializer::get().set("PoissonRatio",
FiniteStrainIsotropicLinearHardeningPlasticity2ParametersInitializer::getDouble(tokens[0],tokens[1]));
} else if("RelativeValueForTheEquivalentStressLowerBoundDefinition"==tokens[0]){
FiniteStrainIsotropicLinearHardeningPlasticity2ParametersInitializer::get().set("RelativeValueForTheEquivalentStressLowerBoundDefinition",
FiniteStrainIsotropicLinearHardeningPlasticity2ParametersInitializer::getDouble(tokens[0],tokens[1]));
} else if("ihr_R0_"==tokens[0]){
FiniteStrainIsotropicLinearHardeningPlasticity2ParametersInitializer::get().set("ihr_R0_",
FiniteStrainIsotropicLinearHardeningPlasticity2ParametersInitializer::getDouble(tokens[0],tokens[1]));
} else if("ihr_H_"==tokens[0]){
FiniteStrainIsotropicLinearHardeningPlasticity2ParametersInitializer::get().set("ihr_H_",
FiniteStrainIsotropicLinearHardeningPlasticity2ParametersInitializer::getDouble(tokens[0],tokens[1]));
} else if("minimal_time_step_scaling_factor"==tokens[0]){
FiniteStrainIsotropicLinearHardeningPlasticity2ParametersInitializer::get().set("minimal_time_step_scaling_factor",
FiniteStrainIsotropicLinearHardeningPlasticity2ParametersInitializer::getDouble(tokens[0],tokens[1]));
} else if("maximal_time_step_scaling_factor"==tokens[0]){
FiniteStrainIsotropicLinearHardeningPlasticity2ParametersInitializer::get().set("maximal_time_step_scaling_factor",
FiniteStrainIsotropicLinearHardeningPlasticity2ParametersInitializer::getDouble(tokens[0],tokens[1]));
} else if("numerical_jacobian_epsilon"==tokens[0]){
FiniteStrainIsotropicLinearHardeningPlasticity2ParametersInitializer::get().set("numerical_jacobian_epsilon",
FiniteStrainIsotropicLinearHardeningPlasticity2ParametersInitializer::getDouble(tokens[0],tokens[1]));
} else if("iterMax"==tokens[0]){
FiniteStrainIsotropicLinearHardeningPlasticity2ParametersInitializer::get().set("iterMax",
FiniteStrainIsotropicLinearHardeningPlasticity2ParametersInitializer::getUnsignedShort(tokens[0],tokens[1]));
} else {
throw_if(true,"invalid parameter '"+tokens[0]+"'");
}
}
}

FiniteStrainIsotropicLinearHardeningPlasticity2PlaneStressParametersInitializer&
FiniteStrainIsotropicLinearHardeningPlasticity2PlaneStressParametersInitializer::get()
{
static FiniteStrainIsotropicLinearHardeningPlasticity2PlaneStressParametersInitializer i;
return i;
}

FiniteStrainIsotropicLinearHardeningPlasticity2PlaneStressParametersInitializer::FiniteStrainIsotropicLinearHardeningPlasticity2PlaneStressParametersInitializer()
{
// Reading parameters from a file
FiniteStrainIsotropicLinearHardeningPlasticity2PlaneStressParametersInitializer::readParameters(*this,"FiniteStrainIsotropicLinearHardeningPlasticity2-parameters.txt");
FiniteStrainIsotropicLinearHardeningPlasticity2PlaneStressParametersInitializer::readParameters(*this,"FiniteStrainIsotropicLinearHardeningPlasticity2PlaneStress-parameters.txt");
}

void
FiniteStrainIsotropicLinearHardeningPlasticity2PlaneStressParametersInitializer::set(const char* const key,
const double v){
using namespace std;
if(::strcmp("epsilon",key)==0){
FiniteStrainIsotropicLinearHardeningPlasticity2ParametersInitializer::get().set("epsilon",v);
} else if(::strcmp("theta",key)==0){
FiniteStrainIsotropicLinearHardeningPlasticity2ParametersInitializer::get().set("theta",v);
} else if(::strcmp("YoungModulus",key)==0){
FiniteStrainIsotropicLinearHardeningPlasticity2ParametersInitializer::get().set("YoungModulus",v);
} else if(::strcmp("PoissonRatio",key)==0){
FiniteStrainIsotropicLinearHardeningPlasticity2ParametersInitializer::get().set("PoissonRatio",v);
} else if(::strcmp("RelativeValueForTheEquivalentStressLowerBoundDefinition",key)==0){
FiniteStrainIsotropicLinearHardeningPlasticity2ParametersInitializer::get().set("RelativeValueForTheEquivalentStressLowerBoundDefinition",v);
} else if(::strcmp("ihr_R0_",key)==0){
FiniteStrainIsotropicLinearHardeningPlasticity2ParametersInitializer::get().set("ihr_R0_",v);
} else if(::strcmp("ihr_H_",key)==0){
FiniteStrainIsotropicLinearHardeningPlasticity2ParametersInitializer::get().set("ihr_H_",v);
} else if(::strcmp("minimal_time_step_scaling_factor",key)==0){
FiniteStrainIsotropicLinearHardeningPlasticity2ParametersInitializer::get().set("minimal_time_step_scaling_factor",v);
} else if(::strcmp("maximal_time_step_scaling_factor",key)==0){
FiniteStrainIsotropicLinearHardeningPlasticity2ParametersInitializer::get().set("maximal_time_step_scaling_factor",v);
} else if(::strcmp("numerical_jacobian_epsilon",key)==0){
FiniteStrainIsotropicLinearHardeningPlasticity2ParametersInitializer::get().set("numerical_jacobian_epsilon",v);
} else {
tfel::raise("FiniteStrainIsotropicLinearHardeningPlasticity2PlaneStressParametersInitializer::set: "
" no parameter named '"+std::string(key)+"'");
}
}

void
FiniteStrainIsotropicLinearHardeningPlasticity2PlaneStressParametersInitializer::set(const char* const key,
const unsigned short v){
using namespace std;
if(::strcmp("iterMax",key)==0){
FiniteStrainIsotropicLinearHardeningPlasticity2ParametersInitializer::get().set("iterMax",v);
} else {
tfel::raise("FiniteStrainIsotropicLinearHardeningPlasticity2PlaneStressParametersInitializer::set: "
"no parameter named '"+std::string(key)+"'");
}
}

void
FiniteStrainIsotropicLinearHardeningPlasticity2PlaneStressParametersInitializer::readParameters(FiniteStrainIsotropicLinearHardeningPlasticity2PlaneStressParametersInitializer&,const char* const fn){
auto tokenize = [](const std::string& line){
std::istringstream tokenizer(line);
std::vector<std::string> tokens;
std::copy(std::istream_iterator<std::string>(tokenizer),
std::istream_iterator<std::string>(),
std::back_inserter(tokens));
return tokens;
};
std::ifstream f(fn);
if(!f){
return;
}
size_t ln = 1u;
while(!f.eof()){
auto line = std::string{};
std::getline(f,line);
auto tokens = tokenize(line);
auto throw_if = [ln,line,fn](const bool c,const std::string& m){
tfel::raise_if(c,"FiniteStrainIsotropicLinearHardeningPlasticity2PlaneStressParametersInitializer::readParameters: "
"error at line '"+std::to_string(ln)+"' "
"while reading parameter file '"+std::string(fn)+"'"
"("+m+")");
};
if(tokens.empty()){
continue;
}
if(tokens[0][0]=='#'){
continue;
}
throw_if(tokens.size()!=2u,"invalid number of tokens");
if("epsilon"==tokens[0]){
FiniteStrainIsotropicLinearHardeningPlasticity2ParametersInitializer::get().set("epsilon",
FiniteStrainIsotropicLinearHardeningPlasticity2ParametersInitializer::getDouble(tokens[0],tokens[1]));
} else if("theta"==tokens[0]){
FiniteStrainIsotropicLinearHardeningPlasticity2ParametersInitializer::get().set("theta",
FiniteStrainIsotropicLinearHardeningPlasticity2ParametersInitializer::getDouble(tokens[0],tokens[1]));
} else if("YoungModulus"==tokens[0]){
FiniteStrainIsotropicLinearHardeningPlasticity2ParametersInitializer::get().set("YoungModulus",
FiniteStrainIsotropicLinearHardeningPlasticity2ParametersInitializer::getDouble(tokens[0],tokens[1]));
} else if("PoissonRatio"==tokens[0]){
FiniteStrainIsotropicLinearHardeningPlasticity2ParametersInitializer::get().set("PoissonRatio",
FiniteStrainIsotropicLinearHardeningPlasticity2ParametersInitializer::getDouble(tokens[0],tokens[1]));
} else if("RelativeValueForTheEquivalentStressLowerBoundDefinition"==tokens[0]){
FiniteStrainIsotropicLinearHardeningPlasticity2ParametersInitializer::get().set("RelativeValueForTheEquivalentStressLowerBoundDefinition",
FiniteStrainIsotropicLinearHardeningPlasticity2ParametersInitializer::getDouble(tokens[0],tokens[1]));
} else if("ihr_R0_"==tokens[0]){
FiniteStrainIsotropicLinearHardeningPlasticity2ParametersInitializer::get().set("ihr_R0_",
FiniteStrainIsotropicLinearHardeningPlasticity2ParametersInitializer::getDouble(tokens[0],tokens[1]));
} else if("ihr_H_"==tokens[0]){
FiniteStrainIsotropicLinearHardeningPlasticity2ParametersInitializer::get().set("ihr_H_",
FiniteStrainIsotropicLinearHardeningPlasticity2ParametersInitializer::getDouble(tokens[0],tokens[1]));
} else if("minimal_time_step_scaling_factor"==tokens[0]){
FiniteStrainIsotropicLinearHardeningPlasticity2ParametersInitializer::get().set("minimal_time_step_scaling_factor",
FiniteStrainIsotropicLinearHardeningPlasticity2ParametersInitializer::getDouble(tokens[0],tokens[1]));
} else if("maximal_time_step_scaling_factor"==tokens[0]){
FiniteStrainIsotropicLinearHardeningPlasticity2ParametersInitializer::get().set("maximal_time_step_scaling_factor",
FiniteStrainIsotropicLinearHardeningPlasticity2ParametersInitializer::getDouble(tokens[0],tokens[1]));
} else if("numerical_jacobian_epsilon"==tokens[0]){
FiniteStrainIsotropicLinearHardeningPlasticity2ParametersInitializer::get().set("numerical_jacobian_epsilon",
FiniteStrainIsotropicLinearHardeningPlasticity2ParametersInitializer::getDouble(tokens[0],tokens[1]));
} else if("iterMax"==tokens[0]){
FiniteStrainIsotropicLinearHardeningPlasticity2ParametersInitializer::get().set("iterMax",
FiniteStrainIsotropicLinearHardeningPlasticity2ParametersInitializer::getUnsignedShort(tokens[0],tokens[1]));
} else {
throw_if(true,"invalid parameter '"+tokens[0]+"'");
}
}
}

FiniteStrainIsotropicLinearHardeningPlasticity2ParametersInitializer&
FiniteStrainIsotropicLinearHardeningPlasticity2ParametersInitializer::get()
{
static FiniteStrainIsotropicLinearHardeningPlasticity2ParametersInitializer i;
return i;
}

FiniteStrainIsotropicLinearHardeningPlasticity2ParametersInitializer::FiniteStrainIsotropicLinearHardeningPlasticity2ParametersInitializer()
{
this->epsilon = 1e-14;
this->theta = 1;
this->young = 70000000000;
this->nu = 0.34;
this->relative_value_for_the_equivalent_stress_lower_bound = 1e-12;
this->ihr_R0_ = 300000000;
this->ihr_H_ = 10000000000;
this->minimal_time_step_scaling_factor = 0.1;
this->maximal_time_step_scaling_factor = 1.7976931348623e+308;
this->numerical_jacobian_epsilon = 1e-15;
this->iterMax = 100;
// Reading parameters from a file
FiniteStrainIsotropicLinearHardeningPlasticity2ParametersInitializer::readParameters(*this,"FiniteStrainIsotropicLinearHardeningPlasticity2-parameters.txt");
}

void
FiniteStrainIsotropicLinearHardeningPlasticity2ParametersInitializer::set(const char* const key,
const double v){
using namespace std;
if(::strcmp("epsilon",key)==0){
this->epsilon = v;
} else if(::strcmp("theta",key)==0){
this->theta = v;
} else if(::strcmp("YoungModulus",key)==0){
this->young = v;
} else if(::strcmp("PoissonRatio",key)==0){
this->nu = v;
} else if(::strcmp("RelativeValueForTheEquivalentStressLowerBoundDefinition",key)==0){
this->relative_value_for_the_equivalent_stress_lower_bound = v;
} else if(::strcmp("ihr_R0_",key)==0){
this->ihr_R0_ = v;
} else if(::strcmp("ihr_H_",key)==0){
this->ihr_H_ = v;
} else if(::strcmp("minimal_time_step_scaling_factor",key)==0){
this->minimal_time_step_scaling_factor = v;
} else if(::strcmp("maximal_time_step_scaling_factor",key)==0){
this->maximal_time_step_scaling_factor = v;
} else if(::strcmp("numerical_jacobian_epsilon",key)==0){
this->numerical_jacobian_epsilon = v;
} else {
tfel::raise("FiniteStrainIsotropicLinearHardeningPlasticity2ParametersInitializer::set: "
" no parameter named '"+std::string(key)+"'");
}
}

void
FiniteStrainIsotropicLinearHardeningPlasticity2ParametersInitializer::set(const char* const key,
const unsigned short v){
using namespace std;
if(::strcmp("iterMax",key)==0){
this->iterMax = v;
} else {
tfel::raise("FiniteStrainIsotropicLinearHardeningPlasticity2ParametersInitializer::set: "
"no parameter named '"+std::string(key)+"'");
}
}

double
FiniteStrainIsotropicLinearHardeningPlasticity2ParametersInitializer::getDouble(const std::string& n,
const std::string& v)
{
double value;
std::istringstream converter(v);
converter >> value;
tfel::raise_if(!converter||(!converter.eof()),
"FiniteStrainIsotropicLinearHardeningPlasticity2ParametersInitializer::getDouble: "
"can't convert '"+v+"' to double for parameter '"+ n+"'");
return value;
}

unsigned short
FiniteStrainIsotropicLinearHardeningPlasticity2ParametersInitializer::getUnsignedShort(const std::string& n,
const std::string& v)
{
unsigned short value;
std::istringstream converter(v);
converter >> value;
tfel::raise_if(!converter||(!converter.eof()),
"FiniteStrainIsotropicLinearHardeningPlasticity2ParametersInitializer::getUnsignedShort: "
"can't convert '"+v+"' to unsigned short for parameter '"+ n+"'");
return value;
}

void
FiniteStrainIsotropicLinearHardeningPlasticity2ParametersInitializer::readParameters(FiniteStrainIsotropicLinearHardeningPlasticity2ParametersInitializer& pi,const char* const fn){
auto tokenize = [](const std::string& line){
std::istringstream tokenizer(line);
std::vector<std::string> tokens;
std::copy(std::istream_iterator<std::string>(tokenizer),
std::istream_iterator<std::string>(),
std::back_inserter(tokens));
return tokens;
};
std::ifstream f(fn);
if(!f){
return;
}
size_t ln = 1u;
while(!f.eof()){
auto line = std::string{};
std::getline(f,line);
auto tokens = tokenize(line);
auto throw_if = [ln,line,fn](const bool c,const std::string& m){
tfel::raise_if(c,"FiniteStrainIsotropicLinearHardeningPlasticity2ParametersInitializer::readParameters: "
"error at line '"+std::to_string(ln)+"' "
"while reading parameter file '"+std::string(fn)+"'"
"("+m+")");
};
if(tokens.empty()){
continue;
}
if(tokens[0][0]=='#'){
continue;
}
throw_if(tokens.size()!=2u,"invalid number of tokens");
if("epsilon"==tokens[0]){
pi.epsilon = FiniteStrainIsotropicLinearHardeningPlasticity2ParametersInitializer::getDouble(tokens[0],tokens[1]);
} else if("theta"==tokens[0]){
pi.theta = FiniteStrainIsotropicLinearHardeningPlasticity2ParametersInitializer::getDouble(tokens[0],tokens[1]);
} else if("YoungModulus"==tokens[0]){
pi.young = FiniteStrainIsotropicLinearHardeningPlasticity2ParametersInitializer::getDouble(tokens[0],tokens[1]);
} else if("PoissonRatio"==tokens[0]){
pi.nu = FiniteStrainIsotropicLinearHardeningPlasticity2ParametersInitializer::getDouble(tokens[0],tokens[1]);
} else if("RelativeValueForTheEquivalentStressLowerBoundDefinition"==tokens[0]){
pi.relative_value_for_the_equivalent_stress_lower_bound = FiniteStrainIsotropicLinearHardeningPlasticity2ParametersInitializer::getDouble(tokens[0],tokens[1]);
} else if("ihr_R0_"==tokens[0]){
pi.ihr_R0_ = FiniteStrainIsotropicLinearHardeningPlasticity2ParametersInitializer::getDouble(tokens[0],tokens[1]);
} else if("ihr_H_"==tokens[0]){
pi.ihr_H_ = FiniteStrainIsotropicLinearHardeningPlasticity2ParametersInitializer::getDouble(tokens[0],tokens[1]);
} else if("minimal_time_step_scaling_factor"==tokens[0]){
pi.minimal_time_step_scaling_factor = FiniteStrainIsotropicLinearHardeningPlasticity2ParametersInitializer::getDouble(tokens[0],tokens[1]);
} else if("maximal_time_step_scaling_factor"==tokens[0]){
pi.maximal_time_step_scaling_factor = FiniteStrainIsotropicLinearHardeningPlasticity2ParametersInitializer::getDouble(tokens[0],tokens[1]);
} else if("numerical_jacobian_epsilon"==tokens[0]){
pi.numerical_jacobian_epsilon = FiniteStrainIsotropicLinearHardeningPlasticity2ParametersInitializer::getDouble(tokens[0],tokens[1]);
} else if("iterMax"==tokens[0]){
pi.iterMax = FiniteStrainIsotropicLinearHardeningPlasticity2ParametersInitializer::getUnsignedShort(tokens[0],tokens[1]);
} else {
throw_if(true,"invalid parameter '"+tokens[0]+"'");
}
}
}

} // end of namespace material

} // end of namespace tfel

